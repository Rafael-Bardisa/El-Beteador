from src.driver.driver_manager import DriverManager
from selenium.webdriver.common.by import By
from typing import Dict, Union

from selenium import webdriver

typeWebDriver = Union[webdriver.Firefox,
                      webdriver.Chrome,
                      webdriver.Edge,
                      webdriver.Safari
                      ]

import logging

from core.interfaces.inner.scraper import ScraperInterface


# webpage url:
url = ''

hydrater_source = "javascript_hydraters/{name}_hydrater.js"

class ModuleScraper(ScraperInterface):
	def __init__(self, logger: logging.Logger):
		self.logger = logger

	def scrap(self, driver: typeWebDriver) -> Dict:
		"""
		Scraps {name} webpage and returns dict of found matches
		:param driver: selenium webdriver reference
		:return template_dict: a dictionary like {match_format}
		"""
		# replacea los ######## por lo que usarias con el driver find elements

		self.logger.debug(f"Loading scraper script")

		with open("./javascript/{name}_scrap.js", "r") as js_file:
			js_script = js_file.read()

		self.logger.debug(f"loaded script: {js_script}")
		self.logger.debug(f"executing script...")

		{name}_data = driver.execute_script(js_script)

		self.logger.debug(f"driver finished executing script. Result: {raw_data}")
		self.logger.debug("parsing data into return format...")

		# diccionario a llenar con las datas scrapeadas
		{name}_dict = {dict}

		self.logger.debug(f"parsed data: {parsed_data}")

		return {name}_dict


def print_dict(dict_to_str):
	for key, val in dict_to_str.items():
		print(f'{key}: {val}')


def main(): # test {name} scraper in isolation
	import chromedriver

	logger = logging.getLogger(__name__)
	logger.setLevel(logging.DEBUG)

	# create console handler and set level to debug
	ch = logging.StreamHandler()
	ch.setLevel(logging.DEBUG)

	# create formatter

	formatter = logging.Formatter('%(asctime)s %(filename)s - %(funcName)s [%(levelname)-s] - %(message)s')

	# add formatter to ch
	ch.setFormatter(formatter)

	# add ch to logger
	logger.addHandler(ch)

	test_scraper = ModuleScraper(logger)

	driver = DriverManager(logger).create_driver("chrome")
	driver.get(url)
	input(f'{url_fmt}')
	print_dict(test_scraper.scrap(driver))
	input('exit')
	driver.close()


if __name__ == '__main__':  # test {name} scraper in isolation
	main()
